# Unibit_pvt_ltd_Assessment

Problem Statement : 
1 . Given an array of integers and a target value, you must determine which two integers' sum
equals the target and return a 2D array. Then merge the array into a single array with sorting (
ascending ) order, in the next step double the target value and find again the combination of
digits (can be multiple digits ) that are equal to the double targeted value and returned into a 2D
array.
Sample Input : [1, 3, 2, 2, -4, -6, -2, 8];
Target Value = 4,
Output: First Combination For “4” : [ [1,3],[2,2],[-4,8],[-6,2] ];
Merge Into a single Array : [-6,-4,1,2,2,2,3,8];
Second Combination For “8” : [ [ 1,3,2,2], [8,-4,2,2],....,[n,n,n,n] ]

Code : Java 

import java.util.Arrays;

class Assessment {
    public static void main(String[] args) {
        int[] input = {1, 3, 2, 2, -4, -6, -2, 8};
        int target = 4;

        int[][] SumEqualToFour = SumisFourFunction(input, target);
        System.out.println("First Combination For \"" + target + "\": " + Arrays.deepToString(SumEqualToFour));

        int[] mergedIntoSingleArray = Arraymergeintosingle(SumEqualToFour);
        System.out.println("After Merged Array: " + Arrays.toString(mergedIntoSingleArray));

        int targetEight = target * 2;
        int[][] SumEqualToEight= SumisEightFunction(mergedIntoSingleArray, targetEight);
        System.out.println("Second Combination For \"" + (targetEight) + "\": " + Arrays.deepToString(SumEqualToEight));
    }

   //all methods start from here.........
    public static int[][] SumisFourFunction(int[] input, int target) {
        int[][] StoreIn_TwoDArray = new int[input.length][2];
        int Count = 0;
        for (int i = 0; i < input.length; i++) {
            for (int j = i + 1; j < input.length; j++) {
                if (input[i] + input[j] == target) {
                    StoreIn_TwoDArray[Count][0] = input[i];
                    StoreIn_TwoDArray[Count][1] = input[j];
                    Count++;
                }
            }
        }
        return Arrays.copyOf(StoreIn_TwoDArray, Count);
    }

    public static int[] Arraymergeintosingle(int[][] input) {
        int countLength = 0;
        for (int i = 0; i < input.length; i++) {
            countLength = countLength + input[i].length;
        }

        int[] singleArray = new int[countLength];
        int Index = 0;

        for (int i = 0; i < input.length; i++) {
            for (int j = 0; j < input[i].length; j++) {
                singleArray[Index] = input[i][j];
                Index++;
            }
        }
        Arrays.sort(singleArray);
        return singleArray;
    }

    public static int[][] SumisEightFunction(int[] input, int targetEight) {
        int[][] StoreEightArray = new int[input.length][4];
        int Count = 0;
        for (int i = 0; i < input.length; i++) {
            for (int j = i + 1; j < input.length; j++) {
                for (int k = j + 1; k < input.length; k++) {
                    for (int l = k + 1; l < input.length; l++) {
                        if (input[i] + input[j] + input[k] + input[l] == targetEight) {
                            StoreEightArray[Count][0] = input[i];
                            StoreEightArray[Count][1] = input[j];
                            StoreEightArray[Count][2] = input[k];
                            StoreEightArray[Count][3] = input[l];
                            Count++;
                        }
                    }
                }
            }
        }
        return Arrays.copyOf(StoreEightArray, Count);
    }
}
